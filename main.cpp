#include <iostream>
//Реализовать функцию перевода чисел из десятичной системы в двоичную, используя рекурсию.
int  decToBin(int num)
{
    if (num == 0)
    {
        return 0;
    }
    else
    {
      return ((num % 2) + (10 * (decToBin(num / 2))));
    }

}
//Реализовать функцию возведения числа [a] в степень [b]:

//2.1. Рекурсивно.

int powC (int a, int b)
{
  //циклическое возведенеие в степень
  int result = a;
  for (int i = 1; i < b; i++)
    result = result * a;
  return result;
}

int powR (int a, int b)
{
//рекурсивное возведение в степень
  if (b == 1)
    return a;
  else
  {
      b--;
      a = a * (powR (a, b));
  }
}
//2.2. Рекурсивно, используя свойство чётности степени
//(то есть, если степень, в которую нужно возвести число, чётная,
//основание возводится в квадрат, а показатель делится на два,
//а если степень нечётная - результат умножается на основание,
//а показатель уменьшается на единицу)

int pow2 (int a, int b)
{
// Рекурсивное возведение в степень с учетом четности показателя степени
  if (b == 1)
    return a;
  else
  {
      if (b % 2 == 0)
        a = (pow2 (a * a, b / 2));
     else
     {
         b--;
         a = a * (pow2 (a, b));
     }
  }
}
//Реализовать нахождение количества маршрутов шахматного короля с препятствиями
//(где единица - это наличие препятствия, а ноль - свободная для хода клетка)
//поле:
#define WIDTH 8
#define HEIGHT 8
int board[HEIGHT][WIDTH];

//понулить поле и выставить препятствия
void setNullsAndBarriers()
{
    for (int i = 0; i < HEIGHT; i++) {
        for (int j = 0; j < WIDTH; j++)
            board[i][j]=0;

    }
    board[1][1]=1;
    board[5][6]=1;
}
//поиск машрутов для короля
//если клетка с препятствием значит в нее попасть нельзя и в нее маршрут не идет - 0
int routes(int x, int y) {
    if (x == 0 && y == 0)
        return 0;
    if (board[x][y]==1)
        return 0;
    if (x == 0 ^ y == 0)
        return 1;
    else
        return routes(x, y - 1) + routes(x - 1, y);
}
int main ()
{



  printf("%d - рекурсивное возведение в степень\n", powR(2, 30));
  printf("%d - Рекурсивное возведение в степень с учетом четности показателя степени \n", pow2(2, 30));
  printf("%d - циклическое возведенеие в степень\n", powC (2, 30));

  setNullsAndBarriers();
  for (int y = 0; y < HEIGHT; y++)
  {
      for (int x = 0; x < WIDTH; x++)
          printf("%5d", routes(x, y));
      printf("\n");
  }

  return 0;
}
